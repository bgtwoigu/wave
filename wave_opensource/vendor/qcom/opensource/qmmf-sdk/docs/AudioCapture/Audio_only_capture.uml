title Audio only Capture

Client->Recorder:CreateSession(session_uuid_record, session_cb_record)
Client->Recorder:createAudioTrack(session_uuid_record,track_id,params,track_cb)
Client->Recorder:StartSession(session_uuid_record)

opt on session error
Recorder-->Client:session_event_cb(event_type=kError,event_data=error_code)
Client->Recorder:StopSession(session_uuid_record,do_flush=1)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
end

Recorder-->Client:session_cb(event_type=kStateChanged,State=STARTED)

loop Audio Recording
Recorder-->Client:audio_track_data_cb(buffers,meta_param,meta_type,meta_size)

opt on Audio track error
Recorder-->Client:audio_track_event_cb(event_type=kError,event_data=error_code)
Client->Recorder:StopSession(session_uuid_record,do_flush=1)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
end

opt dynamic track params update 
Client->Recorder:SetAudioTrackParam(session_uuid_record,track_id,param_type,param,param_size)
end

Client->Recorder:PauseSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=PAUSED)
Client->Recorder:ResumeSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=RESUMED)
end

Client->Recorder:StopSession(session_uuid_record, do_flush=0)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
