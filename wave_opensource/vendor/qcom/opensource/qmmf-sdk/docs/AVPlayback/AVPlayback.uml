title AV Playback
Client->Player:CreateAudioTrack(track_id, params, track_cb)
Client->Player:CreateVideoTrack(track_id, params, track_cb)
Client->Player: Prepare()

opt on prepare error
Player-->Client:player_event_cb(event_type=kError,event_data=error_code)
Client->Player:DeleteAudioTrack(track_id)
Client->Player:DeleteVideoTrack(track_id)
end

Player-->Client:player_cb(event_type=kStateChanged,State=PREPARED)

note right of Client: data path is setup and media data is queued

loop until dequeue returns no buffer
Client->Player: DequeueInputBuffer(track_id, TrackBuffers)
Client->Player: QueueInputBuffer(track_id,TrackBuffers,meta_param,meta_size,meta_type)
end

loop AV Playback
Client->Player: Start()
Player-->Client:player_cb(event_type=kStateChanged,State=STARTED)

note right of Client: wait for track buffer availability
Player-->Client: track_event_cb(track_id, event_type=kInputBufferNotify)
note right of Client: based on track_id, fill the dequeued buffer \n with data from demuxer and call queuebuffer
Client->Player: DequeueInputBuffer(track_id, TrackBuffers)
Client->Player: QueueInputBuffer(track_id,TrackBuffers,meta_param,meta_size,meta_type)
opt
note right of Client: On Port Reconfig event cb from OMX component
Player->Player : issue cmd to component to flush buffers,disable port & free buffers
Player->Player : allocate new set of buffers and call fill buffer again
end
opt
note right of Client: change audio rendering device
Client->Player: SetAudioTrackParam(track_id, param_type, param, param_size)
note right of Client: change video rendering device
Client->Player: SetVideoTrackParam(track_id, param_type, param, param_size)
end

opt on A/V track error
Player-->Client:video_track_event_cb(event_type=kError,event_data=error_code)
Player-->Client:audio_track_event_cb(event_type=kError,event_data=error_code)
Client->Player: Stop(do_flush=0)
Player-->Client:player_cb(event_type=kStateChanged,State=STOPPED)
Client->Player:DeleteAudioTrack(track_id)
Client->Player:DeleteVideoTrack(track_id)
end

Client->Player: SetPosition(seek_time)
Client->Player: SetTrickMode(speed, direction)
Client->Player: Pause()
Player-->Client:player_cb(event_type=kStateChanged,State=PAUSED)
Client->Player: Resume()
Player-->Client:player_cb(event_type=kStateChanged,State=RESUMED)
end
Client->Player: Stop(do_flush=0)
Player-->Client:player_cb(event_type=kStateChanged,State=STOPPED)
Client->Player:DeleteAudioTrack(track_id)
Client->Player:DeleteVideoTrack(track_id)
