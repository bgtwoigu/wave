title AVCapture with Snapshot 

Client->Recorder:StartCamera(camera_id, camera_start_params)
						 
Client->Recorder:CreateSession(session_uuid_record, session_cb_record)
Client->Recorder:createAudioTrack(session_uuid_record,track_id,params,track_cb)
Client->Recorder:createVideoTrack(session_uuid_record,track_id,params,track_cb)
Client->Recorder:StartSession(session_uuid_record)

opt on session error
Recorder-->Client:session_event_cb(event_type=kError,event_data=error_code)
Client->Recorder:StopSession(session_uuid_record,do_flush=1)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteVideoTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
end

Recorder-->Client:session_cb(event_type=kStateChanged,State=STARTED)

loop AV Recording
Recorder-->Client:video_track_data_cb(buffers,meta_param,meta_type,meta_size)
Recorder-->Client:audio_track_data_cb(buffers,meta_param,meta_type,meta_size)

opt on A/V track error
Recorder-->Client:video_track_event_cb(event_type=kError,event_data=error_code)
Recorder-->Client:audio_track_event_cb(event_type=kError,event_data=error_code)
Client->Recorder:StopSession(session_uuid_record,do_flush=1)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteVideoTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
end

opt modify camera sensor/ISP specific params 
Client->Recorder:GetCameraParam(camera_id,camera_param_type,param,param_size)
Client->Recorder:SetCameraParam(camera_id,camera_param_type,param,param_size)
end
note right of Client: Capture images while AV recording
Client->Recorder:CaptureImage(camera_id, image_param,capture_image_cb)
loop 
note right of Client: for each picture a separate callback is called 
Recorder-->Client: image_capture_cb(image_sequence_count, image_data)
note right of Client: during continuous capture, the client calls \n CancelCaptureImage() to cancel capturing of images 
Client->Recorder: CancelCaptureImage()
end

opt dynamic track params update 
Client->Recorder:SetVideoTrackParam(session_uuid_record,track_id,param_type,param,param_size)
Client->Recorder:SetAudioTrackParam(session_uuid_record,track_id,param_type,param,param_size)
end
Client->Recorder:PauseSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=PAUSED)
Client->Recorder:ResumeSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=RESUMED)
end
Client->Recorder:StopSession(session_uuid_record, do_flush=0)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteVideoTrack(session_uuid_record,track_id)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)

Client->Recorder:StopCamera(camera_id)