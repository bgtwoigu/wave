title AV Recording with Live View

Client->Recorder:StartCamera(camera_id, camera_start_params)
						 
opt preview
Client->Recorder:CreateSession(session_uuid_preview, session_cb_preview)
Client->Recorder:createVideoTrack(session_uuid_preview,track_id,params,track_cb=NULL)
Client->Recorder:StartSession(session_uuid_preview)

opt on error
Recorder-->Client:session_event_cb(event_type=kError,event_data=error_code)
Client->Recorder:StopSession(session_uuid_preview,do_flush=1)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteVideoTrack(session_uuid_preview,track_id)
Client->Recorder:DeleteSession(session_uuid_preview)
end

Recorder-->Client:session_cb(event_type=kStateChanged,State=STARTED)

opt modify camera sensor/ISP specific params 
Client->Recorder:GetCameraParam(camera_id,camera_param_type,param,param_size)
Client->Recorder:SetCameraParam(camera_id,camera_param_type,param,param_size)
end

opt AV Record Local storage
Client->Recorder:CreateSession(session_uuid_record, session_cb_record)
Client->Recorder:createAudioTrack(session_uuid_record,track_id,params,track_cb)
Client->Recorder:createVideoTrack(session_uuid_record,track_id,params,track_cb)
Client->Recorder:StartSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STARTED)

loop AV Recording
Recorder-->Client:video_track_data_cb(buffers,meta_param,meta_type,meta_size)
Recorder-->Client:audio_track_data_cb(buffers,meta_param,meta_type,meta_size)

opt on AV record - A/V track error
Recorder-->Client:video_track_event_cb(event_type=kError,event_data=error_code)
Recorder-->Client:audio_track_event_cb(event_type=kError,event_data=error_code)
Client->Recorder:StopSession(session_uuid_record,do_flush=1)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteVideoTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
end

opt dynamic track params update 
Client->Recorder:SetVideoTrackParam(session_uuid_record,track_id,param_type,param,param_size)
Client->Recorder:SetAudioTrackParam(session_uuid_record,track_id,param_type,param,param_size)
end

Client->Recorder:PauseSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=PAUSED)
Client->Recorder:ResumeSession(session_uuid_record)
Recorder-->Client:session_cb(event_type=kStateChanged,State=RESUMED)

opt Live View
Client->Recorder:CreateSession(session_uuid_liveview, session_cb_liveview)
Client->Recorder:createVideoTrack(session_uuid_liveview,track_id,params,track_cb)
Client->Recorder:createAudioTrack(session_uuid_liveview,track_id,params,track_cb)
Client->Recorder:StartSession(session_uuid_liveview)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STARTED)

loop Live View data cbs
Recorder-->Client:video_track_data_cb(buffers,meta_param,meta_type,meta_size)
Recorder-->Client:audio_track_data_cb(buffers,meta_param,meta_type,meta_size)

opt dynamic track params update 
Client->Recorder:SetVideoTrackParam(session_uuid_liveview,track_id,param_type,param,param_size)
Client->Recorder:SetAudioTrackParam(session_uuid_liveview,track_id,param_type,param,param_size)
end
end
Client->Recorder:PauseSession(session_uuid_liveview)
Recorder-->Client:session_cb(event_type=kStateChanged,State=PAUSED)
Client->Recorder:ResumeSession(session_uuid_liveview)
Recorder-->Client:session_cb(event_type=kStateChanged,State=RESUMED)
Client->Recorder:StopSession(session_uuid_liveview, do_flush=0)
Recorder-->Client:session_cb(event_type = kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_liveview,track_id)
Client->Recorder:DeleteVideoTrack(session_uuid_liveview,track_id)
Client->Recorder:DeleteSession(session_uuid_liveview)
end
Client->Recorder:StopSession(session_uuid_record, do_flush=0)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteAudioTrack(session_uuid_record,track_id)
Client->Recorder:DeleteVideoTrack(session_uuid_record,track_id)
Client->Recorder:DeleteSession(session_uuid_record)
end

Client->Recorder:StopSession(session_uuid_preview, do_flush=0)
Recorder-->Client:session_cb(event_type=kStateChanged,State=STOPPED)
Client->Recorder:DeleteVideoTrack(session_uuid_preview,track_id)
Client->Recorder:DeleteSession(session_uuid_preview)
end
Client->Recorder:StopCamera(camera_id)